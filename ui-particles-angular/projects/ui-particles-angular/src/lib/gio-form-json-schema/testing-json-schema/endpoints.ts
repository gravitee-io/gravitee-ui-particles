/*
 * Copyright (C) 2023 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Endpoints plugin configuration
// Extracted from apim master (GET https://apim-master-api.team-apim.gravitee.dev/management/organizations/DEFAULT/environments/DEFAULT/v4/endpoints?expand=schema)
// Last update : 16/02/2023
// To update the schemas, Just past output here:
export const endpointsGetResponse = [
  {
    id: 'http-proxy',
    name: 'Endpoint HTTP proxy',
    description: 'Endpoint that allows exposing Http SyncApi',
    version: '3.21.0-SNAPSHOT',
    supportedApiType: 'sync',
    supportedModes: ['request_response'],
    availableFeatures: [],
    schema:
      '{\n    "type": "object",\n    "id": "urn:jsonschema:io:gravitee:plugin:endpoint:http:proxy:configuration:HttpProxyEndpointConnectorConfiguration",\n    "properties": {\n        "target": {\n            "title": "Target url",\n            "description": "The target url to use to contact the backend",\n            "type": "string"\n        },\n        "http": {\n            "type": "object",\n            "title": "HTTP Options",\n            "id": "urn:jsonschema:io:gravitee:plugin:endpoint:http:proxy:configuration:HttpOptions",\n            "properties": {\n                "clearTextUpgrade": {\n                    "title": "Allow h2c Clear Text Upgrade",\n                    "description": "If enabled, an h2c connection is established using an HTTP/1.1 Upgrade request. If disabled, h2c connection is established directly (with prior knowledge).",\n                    "type": "boolean",\n                    "default": true,\n                    "x-schema-form": {\n                        "hidden": [\n                            {\n                                "$eq": {\n                                    "http.version": "HTTP_1_1"\n                                }\n                            }\n                        ]\n                    }\n                },\n                "version": {\n                    "title": "HTTP Protocol version",\n                    "description": "The version of the HTTP protocol to use",\n                    "type": "string",\n                    "default": "HTTP_1_1",\n                    "enum": ["HTTP_1_1", "HTTP_2"],\n                    "x-schema-form": {\n                        "type": "select",\n                        "titleMap": {\n                            "HTTP_1_1": "HTTP 1.1",\n                            "HTTP_2": "HTTP 2"\n                        }\n                    }\n                },\n                "keepAlive": {\n                    "title": "Enable keep-alive",\n                    "description": "Use an HTTP persistent connection to send and receive multiple HTTP requests / responses.",\n                    "type": "boolean",\n                    "default": true\n                },\n                "connectTimeout": {\n                    "type": "integer",\n                    "title": "Connect timeout (ms)",\n                    "description": "Maximum time to connect to the backend in milliseconds.",\n                    "default": 3000\n                },\n                "pipelining": {\n                    "title": "Enable HTTP pipelining",\n                    "description": "When pipe-lining is enabled requests will be written to connections without waiting for previous responses to return.\\n",\n                    "type": "boolean",\n                    "default": false\n                },\n                "readTimeout": {\n                    "type": "integer",\n                    "title": "Read timeout (ms)",\n                    "description": "Maximum time given to the backend to complete the request (including response) in milliseconds.",\n                    "default": 10000\n                },\n                "useCompression": {\n                    "title": "Enable compression (gzip, deflate)",\n                    "description": "The gateway can let the remote http server know that it supports compression. In case the remote http server returns a compressed response, the gateway will decompress it. Leave that option off if you don\'t want compression between the gateway and the remote server.",\n                    "type": "boolean",\n                    "default": true\n                },\n                "idleTimeout": {\n                    "type": "integer",\n                    "title": "Idle timeout (ms)",\n                    "description": "Maximum time a connection will stay in the pool without being used in milliseconds. Once the timeout has elapsed, the unused connection will be closed, allowing to free the associated resources.",\n                    "default": 60000\n                },\n                "followRedirects": {\n                    "title": "Follow HTTP redirects",\n                    "description": "When the connector receives a status code in the range 3xx from the backend, it follows the redirection provided by the Location response header.",\n                    "type": "boolean",\n                    "default": false\n                },\n                "maxConcurrentConnections": {\n                    "type": "integer",\n                    "title": "Max Concurrent Connections",\n                    "description": "Maximum pool size for connections.",\n                    "default": 20\n                },\n                "propagateClientAcceptEncoding": {\n                    "title": "Propagate client Accept-Encoding header (no decompression if any)",\n                    "description": "The gateway will propagate the Accept-Encoding header\'s value specified by the client\'s request to the backend (if any). The gateway will <b>NEVER attempt to decompress the content</b> if the backend response is compressed (gzip, deflate). It is then not possible to apply transformation policy if the body is compressed. Also, body will appear compressed if logging is enabled for the API. <b>DO NOT</b> activate this option if you plan to play with body responses.",\n                    "type": "boolean",\n                    "default": false,\n                    "x-schema-form": {\n                        "hidden": [\n                            {\n                                "$eq": {\n                                    "http.useCompression": true\n                                }\n                            }\n                        ]\n                    }\n                }\n            },\n            "required": ["connectTimeout", "readTimeout", "idleTimeout", "maxConcurrentConnections"]\n        },\n        "headers": {\n            "type": "array",\n            "title": "HTTP Headers",\n            "description": "Default HTTP headers added or overridden by the API gateway to upstream",\n            "items": {\n                "type": "object",\n                "title": "Header",\n                "id": "urn:jsonschema:io:gravitee:plugin:endpoint:http:proxy:configuration:HttpHeader",\n                "properties": {\n                    "name": {\n                        "type": "string",\n                        "title": "Name"\n                    },\n                    "value": {\n                        "type": "string",\n                        "title": "Value"\n                    }\n                },\n                "required": ["name", "value"]\n            }\n        },\n        "proxy": {\n            "type": "object",\n            "title": "Proxy Options",\n            "id": "urn:jsonschema:io:gravitee:plugin:endpoint:http:proxy:configuration:HttpProxyOptions",\n            "properties": {\n                "enabled": {\n                    "type": "boolean",\n                    "title": "Use proxy",\n                    "description": "Use proxy for client connections",\n                    "default": false\n                },\n                "type": {\n                    "type": "string",\n                    "title": "Proxy Type",\n                    "description": "The type of the proxy",\n                    "default": "HTTP",\n                    "enum": ["HTTP", "SOCKS4", "SOCKS5"],\n                    "x-schema-form": {\n                        "type": "select",\n                        "titleMap": {\n                            "HTTP": "HTTP CONNECT proxy",\n                            "SOCKS4": "SOCKS4/4a tcp proxy",\n                            "SOCKS5": "SOCKS5 tcp proxy"\n                        },\n                        "hidden": [\n                            {\n                                "$eq": {\n                                    "proxy.enabled": false\n                                }\n                            }\n                        ],\n                        "disabled": [\n                            {\n                                "$eq": {\n                                    "proxy.useSystemProxy": true\n                                }\n                            }\n                        ]\n                    }\n                },\n                "useSystemProxy": {\n                    "type": "boolean",\n                    "title": "Use system proxy",\n                    "description": "Use proxy configured at system level",\n                    "default": false,\n                    "x-schema-form": {\n                        "hidden": [\n                            {\n                                "$eq": {\n                                    "proxy.enabled": false\n                                }\n                            }\n                        ]\n                    }\n                },\n                "host": {\n                    "type": "string",\n                    "title": "Proxy host",\n                    "description": "Proxy host to connect to",\n                    "x-schema-form": {\n                        "hidden": [\n                            {\n                                "$eq": {\n                                    "proxy.enabled": false\n                                }\n                            }\n                        ],\n                        "disabled": [\n                            {\n                                "$eq": {\n                                    "proxy.useSystemProxy": true\n                                }\n                            }\n                        ]\n                    }\n                },\n                "port": {\n                    "type": "integer",\n                    "title": "Proxy port",\n                    "description": "Proxy port to connect to",\n                    "x-schema-form": {\n                        "hidden": [\n                            {\n                                "$eq": {\n                                    "proxy.enabled": false\n                                }\n                            }\n                        ],\n                        "disabled": [\n                            {\n                                "$eq": {\n                                    "proxy.useSystemProxy": true\n                                }\n                            }\n                        ]\n                    }\n                },\n                "username": {\n                    "type": "string",\n                    "title": "Proxy username",\n                    "description": "Optional proxy username",\n                    "x-schema-form": {\n                        "hidden": [\n                            {\n                                "$eq": {\n                                    "proxy.enabled": false\n                                }\n                            }\n                        ],\n                        "disabled": [\n                            {\n                                "$eq": {\n                                    "proxy.useSystemProxy": true\n                                }\n                            }\n                        ]\n                    }\n                },\n                "password": {\n                    "type": "string",\n                    "title": "Proxy password",\n                    "description": "Optional proxy password",\n                    "x-schema-form": {\n                        "type": "password",\n                        "hidden": [\n                            {\n                                "$eq": {\n                                    "proxy.enabled": false\n                                }\n                            }\n                        ],\n                        "disabled": [\n                            {\n                                "$eq": {\n                                    "proxy.useSystemProxy": true\n                                }\n                            }\n                        ]\n                    }\n                }\n            },\n            "oneOf": [\n                {\n                    "properties": { "enabled": { "const": false } }\n                },\n                {\n                    "properties": { "useSystemProxy": { "const": true } }\n                },\n                {\n                    "properties": { "enabled": { "const": true }, "useSystemProxy": { "const": false } },\n                    "required": ["host", "port"]\n                }\n            ]\n        },\n        "ssl": {\n            "type": "object",\n            "title": "SSL Options",\n            "id": "urn:jsonschema:io:gravitee:plugin:endpoint:http:proxy:configuration:SslOptions",\n            "properties": {\n                "hostnameVerifier": {\n                    "title": "Verify Host",\n                    "description": "Use to enable host name verification",\n                    "type": "boolean",\n                    "default": true\n                },\n                "trustAll": {\n                    "title": "Trust all",\n                    "description": "Use this with caution (if over Internet). The gateway must trust any origin certificates. The connection will still be encrypted but this mode is vulnerable to \'man in the middle\' attacks.",\n                    "type": "boolean",\n                    "default": false\n                },\n                "trustStore": {\n                    "type": "object",\n                    "title": "Trust store",\n                    "id": "urn:jsonschema:io:gravitee:plugin:endpoint:http:proxy:configuration:SslTrustStoreOptions",\n                    "properties": {\n                        "type": {\n                            "type": "string",\n                            "title": "Type",\n                            "description": "The type of the trust store",\n                            "default": "",\n                            "enum": ["", "JKS", "PKCS12", "PEM"],\n                            "x-schema-form": {\n                                "type": "select",\n                                "titleMap": {\n                                    "": "None",\n                                    "JKS": "Java Trust Store (.jks)",\n                                    "PKCS12": "PKCS#12 (.p12) / PFX (.pfx)",\n                                    "PEM": "PEM (.pem)"\n                                }\n                            }\n                        },\n                        "password": {\n                            "type": "string",\n                            "title": "Password",\n                            "description": "Trust store password",\n                            "x-schema-form": {\n                                "type": "password",\n                                "hidden": [\n                                    {\n                                        "$eq": {\n                                            "ssl.trustStore.type": ["", "PEM"]\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        "path": {\n                            "type": "string",\n                            "title": "Path to trust store",\n                            "description": "Path to the trust store file",\n                            "x-schema-form": {\n                                "hidden": [\n                                    {\n                                        "$eq": {\n                                            "ssl.trustStore.type": ""\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        "content": {\n                            "type": "string",\n                            "title": "Content",\n                            "description": "Binary content as Base64",\n                            "x-schema-form": {\n                                "type": "text",\n                                "hidden": [\n                                    {\n                                        "$eq": {\n                                            "ssl.trustStore.type": ""\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    },\n                    "oneOf": [\n                        {\n                            "properties": { "type": { "const": "" } }\n                        },\n                        {\n                            "properties": { "type": { "const": "PEM" } },\n                            "required": ["content"]\n                        },\n                        {\n                            "properties": { "type": { "const": "PEM" } },\n                            "required": ["path"]\n                        },\n                        {\n                            "properties": { "type": { "pattern": "JKS|PKCS12" } },\n                            "required": ["content", "password"]\n                        },\n                        {\n                            "properties": { "type": { "pattern": "JKS|PKCS12" } },\n                            "required": ["path", "password"]\n                        }\n                    ],\n                    "x-schema-form": {\n                        "hidden": [\n                            {\n                                "$eq": {\n                                    "ssl.trustAll": true\n                                }\n                            }\n                        ]\n                    }\n                },\n                "keyStore": {\n                    "type": "object",\n                    "title": "Key store",\n                    "id": "urn:jsonschema:io:gravitee:plugin:endpoint:http:proxy:configuration:SslKeyStoreOptions",\n                    "properties": {\n                        "type": {\n                            "type": "string",\n                            "title": "Type",\n                            "description": "The type of the key store",\n                            "default": "",\n                            "enum": ["", "JKS", "PKCS12", "PEM"],\n                            "x-schema-form": {\n                                "type": "select",\n                                "titleMap": {\n                                    "": "None",\n                                    "JKS": "Java Trust Store (.jks)",\n                                    "PKCS12": "PKCS#12 (.p12) / PFX (.pfx)",\n                                    "PEM": "PEM (.pem)"\n                                }\n                            }\n                        },\n                        "password": {\n                            "type": "string",\n                            "title": "Password",\n                            "description": "Password to use to open the key store",\n                            "x-schema-form": {\n                                "type": "password",\n                                "hidden": [\n                                    {\n                                        "$eq": {\n                                            "ssl.keyStore.type": ["", "PEM"]\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        "alias": {\n                            "type": "string",\n                            "title": "Alias for the key",\n                            "description": "Alias of the key to use in case the key store contains more than one key",\n                            "x-schema-form": {\n                                "type": "password",\n                                "hidden": [\n                                    {\n                                        "$eq": {\n                                            "ssl.keyStore.type": ["", "PEM"]\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        "keyPassword": {\n                            "type": "string",\n                            "title": "Key Password",\n                            "description": "Password to use to access the key when protected by password",\n                            "x-schema-form": {\n                                "type": "password",\n                                "hidden": [\n                                    {\n                                        "$eq": {\n                                            "ssl.keyStore.type": ["", "PEM"]\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        "path": {\n                            "type": "string",\n                            "title": "Path to key store",\n                            "description": "Path to the key store file",\n                            "x-schema-form": {\n                                "hidden": [\n                                    {\n                                        "$eq": {\n                                            "ssl.keyStore.type": ["", "PEM"]\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        "content": {\n                            "type": "string",\n                            "title": "Content",\n                            "description": "Binary content as Base64",\n                            "x-schema-form": {\n                                "type": "text",\n                                "hidden": [\n                                    {\n                                        "$eq": {\n                                            "ssl.keyStore.type": ["", "PEM"]\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        "certPath": {\n                            "type": "string",\n                            "title": "Path to cert file",\n                            "description": "Path to cert file (.PEM)",\n                            "x-schema-form": {\n                                "hidden": [\n                                    {\n                                        "$neq": {\n                                            "ssl.keyStore.type": "PEM"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        "certContent": {\n                            "type": "string",\n                            "title": "Certificate",\n                            "x-schema-form": {\n                                "type": "text",\n                                "hidden": [\n                                    {\n                                        "$neq": {\n                                            "ssl.keyStore.type": "PEM"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        "keyPath": {\n                            "type": "string",\n                            "title": "Path to private key file",\n                            "description": "Path to private key file (.PEM)",\n                            "x-schema-form": {\n                                "hidden": [\n                                    {\n                                        "$neq": {\n                                            "ssl.keyStore.type": "PEM"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        "keyContent": {\n                            "type": "string",\n                            "title": "Private key",\n                            "x-schema-form": {\n                                "type": "text",\n                                "hidden": [\n                                    {\n                                        "$neq": {\n                                            "ssl.keyStore.type": "PEM"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    },\n                    "oneOf": [\n                        {\n                            "properties": { "type": { "const": "" } }\n                        },\n                        {\n                            "properties": { "type": { "const": "PEM" } },\n                            "required": ["certContent", "keyContent"]\n                        },\n                        {\n                            "properties": { "type": { "const": "PEM" } },\n                            "required": ["certPath", "keyPath"]\n                        },\n                        {\n                            "properties": { "type": { "const": "PEM" } },\n                            "required": ["certContent", "keyPath"]\n                        },\n                        {\n                            "properties": { "type": { "const": "PEM" } },\n                            "required": ["certPath", "keyContent"]\n                        },\n                        {\n                            "properties": { "type": { "pattern": "JKS|PKCS12" } },\n                            "required": ["content", "password"]\n                        },\n                        {\n                            "properties": { "type": { "pattern": "JKS|PKCS12" } },\n                            "required": ["path", "password"]\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    "required": ["target"],\n    "additionalProperties": false,\n    "x-schema-form": {\n        "errors": {\n            "proxy": {\n                "oneOf": "The host and port are <span class=\\"error\\">required</span>"\n            },\n            "ssl": {\n                "trustStore": {\n                    "oneOf": "A path or a content is <span class=\\"error\\">required</span> - for JKS and PKCS#12 a password is also <span class=\\"error\\">required</span>"\n                },\n                "keyStore": {\n                    "oneOf": "Paths or contents are <span class=\\"error\\">required</span> - for JKS and PKCS#12, a password is also <span class=\\"error\\">required</span>."\n                }\n            }\n        }\n    }\n}\n',
  },
  {
    id: 'kafka-advanced',
    name: 'Endpoint Kafka Advanced',
    description: 'Advanced version of Kafka Endpoint',
    version: '1.0.1-alpha.1',
    supportedApiType: 'async',
    supportedModes: ['publish', 'subscribe'],
    availableFeatures: [null, 'limit'],
    schema:
      '{\n    "type": "object",\n    "id": "urn:jsonschema:com:graviteesource:endpoint:kafka:advanced:configuration:KafkaAdvancedConfiguration",\n    "additionalProperties": false,\n    "properties": {\n        "bootstrapServers": {\n            "type": "string",\n            "title": "bootstrap.servers",\n            "description": "This list should be in the form host1:port1,host2:port2,...",\n            "gioConfig": {\n                "banner": {\n                    "title": "Bootstrap servers",\n                    "text": "A list of host/port pairs, separated by a comma, to use for establishing the initial connection to the Kafka cluster. The client will make use of all servers irrespective of which servers are specified here for bootstrapping—this list only impacts the initial hosts used to discover the full set of servers. "\n                }\n            }\n        },\n        "topics": {\n            "type": "array",\n            "items": {\n                "type": "string"\n            },\n            "title": "topics",\n            "description": "A list of kafka topics to use."\n        },\n        "security": {\n            "type": "object",\n            "title": "Security configuration",\n            "id": "urn:jsonschema:com:graviteesource:endpoint:kafka:advanced:configuration:KafkaAdvancedSecurityConfiguration",\n            "properties": {\n                "protocol": {\n                    "type": "string",\n                    "title": "security.protocol",\n                    "description": "Valid values are: PLAINTEXT, SASL_PLAINTEXT, SASL_SSL, SSL.",\n                    "default": "PLAINTEXT",\n                    "enum": [\n                        "PLAINTEXT",\n                        "SASL_PLAINTEXT",\n                        "SASL_SSL",\n                        "SSL"\n                    ],\n                    "gioConfig": {\n                        "banner": {\n                            "title": "Security protocol",\n                            "text": "Protocol used to communicate with brokers"\n                        }\n                    }\n\n                },\n                "sasl": {\n                    "type": "object",\n                    "title": "SASL configuration",\n                    "id": "urn:jsonschema:com:graviteesource:endpoint:kafka:advanced:configuration:KafkaAdvancedSecurityConfiguration:Sasl",\n                    "properties": {\n                        "saslMechanism": {\n                            "type": "string",\n                            "title": "sasl.mechanism",\n                            "description": "SASL mechanism used for client connections.",\n                            "default": "GSSAPI",\n                            "enum": ["GSSAPI", "OAUTHBEARER", "PLAIN", "SCRAM-SHA-256", "SCRAM-SHA-512"]\n                        },\n                        "saslJaasConfig": {\n                            "type": "string",\n                            "title": "sasl.jaas.config",\n                            "gioConfig": {\n                                "banner": {\n                                    "title": "SASL JAAS Config",\n                                    "text": "JAAS login context parameters for SASL connections in the format used by JAAS configuration files. JAAS configuration file format is described here. The format for the value is: loginModuleClass controlFlag (optionName=optionValue)*;"\n                                }\n                            }\n                        }\n                    },\n                    "required": [\n                        "saslMechanism",\n                        "saslJaasConfig"\n                    ]\n                },\n                "ssl": {\n                    "type": "object",\n                    "title": "SSL configuration",\n                    "id": "urn:jsonschema:com:graviteesource:endpoint:kafka:advanced:configuration:KafkaAdvancedSecurityConfiguration:Ssl",\n                    "properties": {\n                        "trustStore": {\n                            "type": "object",\n                            "title": "Truststore configuration",\n                            "id": "urn:jsonschema:com:graviteesource:endpoint:kafka:advanced:configuration:KafkaAdvancedSecurityConfiguration:Ssl:TrustStore",\n                            "properties": {\n                                "type": {\n                                    "type": "string",\n                                    "title": "ssl.trustStore.type",\n                                    "description": "The file format of the trust store file.",\n                                    "enum": ["JKS", "PEM", "PKCS12"]\n                                },\n                                "location": {\n                                    "title": "ssl.trustStore.location",\n                                    "description": "The location of the trust store file.",\n                                    "type": "string"\n                                },\n                                "password": {\n                                    "title": "ssl.trustStore.password",\n                                    "type": "string",\n                                    "gioConfig": {\n                                        "banner": {\n                                            "title": "SSL truststore password",\n                                            "text": "The password for the trust store file. If a password is not set, trust store file configured will still be used, but integrity checking is disabled. Trust store password is not supported for PEM format."\n                                        }\n                                    }\n                                },\n                                "certificates": {\n                                    "title": "ssl.trustStore.certificates",\n                                    "type": "string",\n                                    "gioConfig": {\n                                        "banner": {\n                                            "title": "SSL truststore certificated",\n                                            "text": "Trusted certificates in the format specified by \'ssl.truststore.type\'. Default SSL engine factory supports only PEM format with X.509 certificates."\n                                        }\n                                    }\n                                }\n                            },\n                            "allOf": [\n                                {\n                                    "oneOf": [\n                                        {\n                                            "required": [\n                                                "location"\n                                            ]\n                                        },\n                                        {\n                                            "required": [\n                                                "certificates"\n                                            ]\n                                        }\n                                    ]\n                                },\n                                {\n                                    "oneOf": [\n                                        {\n                                            "properties": {\n                                                "type": {\n                                                    "enum": [\n                                                        "JKS"\n                                                    ]\n                                                }\n                                            }\n                                        },\n                                        {\n                                            "properties": {\n                                                "type": {\n                                                    "enum": [\n                                                        "PKCS12"\n                                                    ]\n                                                }\n                                            }\n                                        },\n                                        {\n                                            "properties": {\n                                                "type": {\n                                                    "enum": [\n                                                        "PEM"\n                                                    ]\n                                                }\n                                            },\n                                            "not": {\n                                                "required": [\n                                                    "password"\n                                                ]\n                                            }\n                                        }\n                                    ]\n                                }\n                            ],\n                            "required": [\n                                "type"\n                            ]\n                        },\n                        "keyStore": {\n                            "type": "object",\n                            "title": "KeyStore configuration",\n                            "id": "urn:jsonschema:com:graviteesource:endpoint:kafka:advanced:configuration:KafkaAdvancedSecurityConfiguration:Ssl:KeyStore",\n                            "properties": {\n                                "type": {\n                                    "type": "string",\n                                    "title": "ssl.keyStore.type",\n                                    "description": "The file format of the trust store file. This is optional for client.",\n                                    "enum": [\n                                        "JKS",\n                                        "PEM",\n                                        "PKCS12"\n                                    ]\n                                },\n                                "location": {\n                                    "title": "ssl.keystore.location",\n                                    "description": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.",\n                                    "type": "string"\n                                },\n                                "password": {\n                                    "title": "ssl.keystore.password",\n                                    "type": "string",\n                                    "gioConfig": {\n                                        "banner": {\n                                            "title": "SSL keystore password",\n                                            "text": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured. Key store password is not supported for PEM format"\n                                        }\n                                    }\n                                },\n                                "certificateChain": {\n                                    "title": "ssl.keystore.certificate.chain",\n                                    "type": "string",\n                                    "gioConfig": {\n                                        "banner": {\n                                            "title": "SSL keystore certificate chain",\n                                            "text": "Certificate chain in the format specified by \'ssl.keystore.type\'. Default SSL engine factory supports only PEM format with a list of X.509 certificates."\n                                        }\n                                    }\n                                },\n                                "key": {\n                                    "title": "ssl.keystore.key",\n                                    "type": "string",\n                                    "gioConfig": {\n                                        "banner": {\n                                            "title": "SSL keystore private key",\n                                            "text": "Private key in the format specified by \'ssl.keystore.type\'. Default SSL engine factory supports only PEM format with PKCS#8 keys. If the key is encrypted, key password must be specified using \'ssl.key.password\'."\n                                        }\n                                    }\n                                },\n                                "keyPassword": {\n                                    "title": "ssl.key.password",\n                                    "description": "The password of the private key in the key store file. This is optional for client.",\n                                    "type": "string"\n                                }\n                            },\n                            "allOf": [\n                                {\n\n                                },\n                                {\n                                    "oneOf": [\n                                        {\n                                            "required": ["location"]\n                                        },\n                                        {\n                                            "required": ["key", "certificateChain"]\n                                        }\n                                    ]\n                                },\n                                {\n                                    "oneOf": [\n                                        {\n                                            "properties": {\n                                                "type": {\n                                                    "enum": [\n                                                        "JKS"\n                                                    ]\n                                                }\n                                            },\n                                            "not": {\n                                                "required": [\n                                                    "certificateChain"\n                                                ]\n                                            }\n                                        },\n                                        {\n                                            "properties": {\n                                                "type": {\n                                                    "enum": [\n                                                        "PKCS12"\n                                                    ]\n                                                }\n                                            },\n                                            "not": {\n                                                "required": [\n                                                    "certificateChain"\n                                                ]\n                                            }\n                                        },\n                                        {\n                                            "properties": {\n                                                "type": {\n                                                    "enum": [\n                                                        "PEM"\n                                                    ]\n                                                }\n                                            },\n                                            "not": {\n                                                "required": [\n                                                    "password"\n                                                ]\n                                            }\n                                        }\n                                    ]\n                                }\n                            ],\n                            "required": ["type"]\n                        }\n                    },\n                    "required": ["trustStore"]\n                }\n            },\n            "oneOf": [\n                {\n                    "properties": {\n                        "protocol": {\n                            "enum": [\n                                "PLAINTEXT"\n                            ]\n                        }\n                    }\n                },\n                {\n                    "properties": {\n                        "protocol": {\n                            "enum": [\n                                "SASL_PLAINTEXT"\n                            ]\n                        }\n                    },\n                    "required": [\n                        "sasl"\n                    ]\n                },\n                {\n                    "properties": {\n                        "protocol": {\n                            "enum": [\n                                "SASL_SSL"\n                            ]\n                        }\n                    },\n                    "required": [\n                        "sasl"\n                    ]\n                },\n                {\n                    "properties": {\n                        "protocol": {\n                            "enum": [\n                                "SSL"\n                            ]\n                        }\n                    },\n                    "required": [\n                        "ssl"\n                    ]\n                }\n            ]\n        },\n        "consumer": {\n            "type": "object",\n            "title": "Consumer configuration",\n            "id": "urn:jsonschema:io:gravitee:plugin:endpoint:kafka:configuration:KafkaEndpointConnectorConfiguration:Consumer",\n            "properties": {\n                "enabled": {\n                    "title": "enabled",\n                    "description": "Allow to enable or disable the consumer capability.",\n                    "type": "boolean",\n                    "default": true\n                },\n                "encodeMessageId": {\n                    "title": "encodeMessageId",\n                    "description": "This options allows encoding message id in base64.",\n                    "type": "boolean",\n                    "default": true\n                },\n                "autoOffsetReset": {\n                    "title": "auto.offset.reset",\n                    "type": "string",\n                    "default": "latest",\n                    "enum": ["latest", "earliest", "none"],\n                    "gioConfig": {\n                        "banner": {\n                            "title": "Auto offset reset",\n                            "text": "What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server (e.g. because that data has been deleted): <ul><li>earliest: automatically reset the offset to the earliest offset<li>latest: automatically reset the offset to the latest offset</li><li>none: throw exception to the consumer if no previous offset is found for the consumer\'s group</li><li>anything else: throw exception to the consumer.</li></ul>"\n                        }\n                    }\n                }\n            }\n        },\n        "producer": {\n            "type": "object",\n            "title": "Producer configuration",\n            "id": "urn:jsonschema:io:gravitee:plugin:endpoint:kafka:configuration:KafkaEndpointConnectorConfiguration:Producer",\n            "properties": {\n                "enabled": {\n                    "title": "enabled",\n                    "description": "Allow to enable or disable the producer capability.",\n                    "type": "boolean",\n                    "default": "true"\n                }\n            }\n        }\n    },\n    "required": ["bootstrapServers"]\n}\n',
  },
  {
    id: 'mqtt5',
    name: 'Endpoint MQTT 5.x',
    description: 'MQTT 5.x Endpoint',
    version: '3.21.0-SNAPSHOT',
    supportedApiType: 'async',
    supportedModes: ['publish', 'subscribe'],
    availableFeatures: [],
  },
  {
    id: 'mqtt5-advanced',
    name: 'Endpoint MQTT 5.x Advanced',
    description: 'Advanced version of MQTT 5.x Endpoint',
    version: '1.0.0-alpha.4',
    supportedApiType: 'async',
    supportedModes: ['publish', 'subscribe'],
    availableFeatures: [null, 'limit'],
    schema:
      '{\n    "type": "object",\n    "id": "urn:jsonschema:com:graviteesource:endpoint:mqtt5:advanced:configuration:Mqtt5AdvancedConfiguration",\n    "additionalProperties": false,\n    "properties": {\n        "identifier": {\n            "type": "string",\n            "title": "identifier",\n            "description": "The client identifier identifies the MQTT client that connects to an MQTT broker."\n        },\n        "serverHost": {\n            "type": "string",\n            "title": "serverHost",\n            "description": "Define the host of the MQTT broker."\n        },\n        "serverPort": {\n            "type": "integer",\n            "title": "serverPort",\n            "description": "Define the port of the MQTT broker."\n        },\n        "topic": {\n            "type": "string",\n            "title": "topic",\n            "description": "Refers to an UTF-8 string that the broker uses to filter messages for each connected client. The topic consists of one or more topic levels. Each topic level is separated by a forward slash (topic level separator)."\n        },\n        "reconnectAttempt": {\n            "type": "integer",\n            "title": "reconnectAttempt",\n            "description": "Number of reconnect attempt after any kind of disconnection.",\n            "default": 3,\n            "minimum": 0,\n            "maximum": 10\n        },\n        "sessionExpiryInterval": {\n            "title": "sessionExpiryInterval",\n            "description": "This interval defines the period of time that the broker stores the session information of that particular MQTT client. When the session expiry interval is set to 0 or the CONNECT packet does not contain an expiry value, the session information is immediately removed from the broker as soon as the network connection of the client closes.",\n            "type": "integer",\n            "default": 0,\n            "minimum": 0\n        },\n        "cleanStart": {\n            "title": "cleanStart",\n            "description": "When using this flag, the broker discards any previous session data and the client starts with a fresh session.",\n            "type": "boolean",\n            "default": true\n        },\n        "security": {\n            "type": "object",\n            "title": "Security configuration",\n            "id": "urn:jsonschema:com:graviteesource:endpoint:mqtt5:advanced:configuration:Mqtt5AdvancedSecurityConfiguration",\n            "properties": {\n                "auth": {\n                    "type": "object",\n                    "title": "Authentication configuration",\n                    "id": "urn:jsonschema:com:graviteesource:endpoint:mqtt5:advanced:configuration:Mqtt5AdvancedSecurityConfiguration:Authentication",\n                    "properties": {\n                        "username": {\n                            "type": "string",\n                            "title": "username",\n                            "description": "Username used for authentication."\n                        },\n                        "password": {\n                            "type": "string",\n                            "title": "password",\n                            "description": "Password used for authentication."\n                        }\n                    },\n                    "anyOf": [\n                        {\n                            "required": ["username"]\n                        },\n                        {\n                            "required": ["password"]\n                        }\n                    ]\n                },\n                "ssl": {\n                    "type": "object",\n                    "title": "SSL configuration",\n                    "id": "urn:jsonschema:com:graviteesource:endpoint:mqtt5:advanced:configuration:Mqtt5AdvancedSecurityConfiguration:SSL",\n                    "properties": {\n                        "hostnameVerifier": {\n                            "title": "hostnameVerifier",\n                            "description": "Use to enable host name verification",\n                            "type": "boolean",\n                            "default": true\n                        },\n                        "trustStore": {\n                            "type": "object",\n                            "title": "trustStore",\n                            "id": "urn:jsonschema:com:graviteesource:endpoint:mqtt5:advanced:configuration:Mqtt5AdvancedSecurityConfiguration:TrustStore",\n                            "properties": {\n                                "type": {\n                                    "type": "string",\n                                    "title": "Type",\n                                    "description": "The type of the trust store",\n                                    "default": "",\n                                    "enum": ["", "JKS", "PKCS12", "PEM"],\n                                    "x-schema-form": {\n                                        "type": "select",\n                                        "titleMap": {\n                                            "": "None",\n                                            "JKS": "Java Trust Store (.jks)",\n                                            "PKCS12": "PKCS#12 (.p12) / PFX (.pfx)",\n                                            "PEM": "PEM (.pem)"\n                                        }\n                                    }\n                                },\n                                "password": {\n                                    "type": "string",\n                                    "title": "Password",\n                                    "description": "Trust store password",\n                                    "x-schema-form": {\n                                        "type": "password",\n                                        "hidden": [\n                                            {\n                                                "$eq": {\n                                                    "ssl.trustStore.type": ["", "PEM"]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                },\n                                "path": {\n                                    "type": "string",\n                                    "title": "Path to trust store",\n                                    "description": "Path to the trust store file",\n                                    "x-schema-form": {\n                                        "hidden": [\n                                            {\n                                                "$eq": {\n                                                    "ssl.trustStore.type": ""\n                                                }\n                                            }\n                                        ]\n                                    }\n                                },\n                                "content": {\n                                    "type": "string",\n                                    "title": "Content",\n                                    "description": "Binary content as Base64",\n                                    "x-schema-form": {\n                                        "type": "text",\n                                        "hidden": [\n                                            {\n                                                "$eq": {\n                                                    "ssl.trustStore.type": ""\n                                                }\n                                            }\n                                        ]\n                                    }\n                                }\n                            },\n                            "oneOf": [\n                                {\n                                    "properties": {\n                                        "type": {\n                                            "const": ""\n                                        }\n                                    }\n                                },\n                                {\n                                    "properties": {\n                                        "type": {\n                                            "const": "PEM"\n                                        }\n                                    },\n                                    "required": ["content"]\n                                },\n                                {\n                                    "properties": {\n                                        "type": {\n                                            "const": "PEM"\n                                        }\n                                    },\n                                    "required": ["path"]\n                                },\n                                {\n                                    "properties": {\n                                        "type": {\n                                            "pattern": "JKS|PKCS12"\n                                        }\n                                    },\n                                    "required": ["content", "password"]\n                                },\n                                {\n                                    "properties": {\n                                        "type": {\n                                            "pattern": "JKS|PKCS12"\n                                        }\n                                    },\n                                    "required": ["path", "password"]\n                                }\n                            ],\n                            "x-schema-form": {\n                                "hidden": [\n                                    {\n                                        "$eq": {\n                                            "ssl.trustAll": true\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        "keyStore": {\n                            "type": "object",\n                            "title": "Key store",\n                            "id": "urn:jsonschema:com:graviteesource:endpoint:mqtt5:advanced:configuration:Mqtt5AdvancedSecurityConfiguration:KeyStore",\n                            "properties": {\n                                "type": {\n                                    "type": "string",\n                                    "title": "Type",\n                                    "description": "The type of the key store",\n                                    "default": "",\n                                    "enum": ["", "JKS", "PKCS12", "PEM"],\n                                    "x-schema-form": {\n                                        "type": "select",\n                                        "titleMap": {\n                                            "": "None",\n                                            "JKS": "Java Trust Store (.jks)",\n                                            "PKCS12": "PKCS#12 (.p12) / PFX (.pfx)",\n                                            "PEM": "PEM (.pem)"\n                                        }\n                                    }\n                                },\n                                "password": {\n                                    "type": "string",\n                                    "title": "Password",\n                                    "description": "Key store password",\n                                    "x-schema-form": {\n                                        "type": "password",\n                                        "hidden": [\n                                            {\n                                                "$eq": {\n                                                    "ssl.keyStore.type": ["", "PEM"]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                },\n                                "path": {\n                                    "type": "string",\n                                    "title": "Path to key store",\n                                    "description": "Path to the key store file",\n                                    "x-schema-form": {\n                                        "hidden": [\n                                            {\n                                                "$eq": {\n                                                    "ssl.keyStore.type": ["", "PEM"]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                },\n                                "content": {\n                                    "type": "string",\n                                    "title": "Content",\n                                    "description": "Binary content as Base64",\n                                    "x-schema-form": {\n                                        "type": "text",\n                                        "hidden": [\n                                            {\n                                                "$eq": {\n                                                    "ssl.keyStore.type": ["", "PEM"]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                },\n                                "certPath": {\n                                    "type": "string",\n                                    "title": "Path to cert file",\n                                    "description": "Path to cert file (.PEM)",\n                                    "x-schema-form": {\n                                        "hidden": [\n                                            {\n                                                "$neq": {\n                                                    "ssl.keyStore.type": "PEM"\n                                                }\n                                            }\n                                        ]\n                                    }\n                                },\n                                "certContent": {\n                                    "type": "string",\n                                    "title": "Certificate",\n                                    "x-schema-form": {\n                                        "type": "text",\n                                        "hidden": [\n                                            {\n                                                "$neq": {\n                                                    "ssl.keyStore.type": "PEM"\n                                                }\n                                            }\n                                        ]\n                                    }\n                                },\n                                "keyPath": {\n                                    "type": "string",\n                                    "title": "Path to private key file",\n                                    "description": "Path to private key file (.PEM)",\n                                    "x-schema-form": {\n                                        "hidden": [\n                                            {\n                                                "$neq": {\n                                                    "ssl.keyStore.type": "PEM"\n                                                }\n                                            }\n                                        ]\n                                    }\n                                },\n                                "keyContent": {\n                                    "type": "string",\n                                    "title": "Private key",\n                                    "x-schema-form": {\n                                        "type": "text",\n                                        "hidden": [\n                                            {\n                                                "$neq": {\n                                                    "ssl.keyStore.type": "PEM"\n                                                }\n                                            }\n                                        ]\n                                    }\n                                }\n                            },\n                            "oneOf": [\n                                {\n                                    "properties": {\n                                        "type": {\n                                            "const": ""\n                                        }\n                                    }\n                                },\n                                {\n                                    "properties": {\n                                        "type": {\n                                            "const": "PEM"\n                                        }\n                                    },\n                                    "required": ["certContent", "keyContent"]\n                                },\n                                {\n                                    "properties": {\n                                        "type": {\n                                            "const": "PEM"\n                                        }\n                                    },\n                                    "required": ["certPath", "keyPath"]\n                                },\n                                {\n                                    "properties": {\n                                        "type": {\n                                            "const": "PEM"\n                                        }\n                                    },\n                                    "required": ["certContent", "keyPath"]\n                                },\n                                {\n                                    "properties": {\n                                        "type": {\n                                            "const": "PEM"\n                                        }\n                                    },\n                                    "required": ["certPath", "keyContent"]\n                                },\n                                {\n                                    "properties": {\n                                        "type": {\n                                            "pattern": "JKS|PKCS12"\n                                        }\n                                    },\n                                    "required": ["content", "password"]\n                                },\n                                {\n                                    "properties": {\n                                        "type": {\n                                            "pattern": "JKS|PKCS12"\n                                        }\n                                    },\n                                    "required": ["path", "password"]\n                                }\n                            ]\n                        }\n                    }\n                }\n            }\n        },\n        "consumer": {\n            "type": "object",\n            "title": "Consumer configuration",\n            "id": "urn:jsonschema:com:graviteesource:endpoint:mqtt5:advanced:configuration:Mqtt5AdvancedConfiguration:Consumer",\n            "properties": {\n                "enabled": {\n                    "title": "enabled",\n                    "description": "Allow enabling or disabling the consumer capability.",\n                    "type": "boolean",\n                    "default": true\n                }\n            }\n        },\n        "producer": {\n            "type": "object",\n            "title": "Producer configuration",\n            "id": "urn:jsonschema:com:graviteesource:endpoint:mqtt5:advanced:configuration:Mqtt5AdvancedConfiguration:Producer",\n            "properties": {\n                "enabled": {\n                    "title": "enabled",\n                    "description": "Allow enabling or disabling the producer capability.",\n                    "type": "boolean",\n                    "default": true\n                },\n                "retained": {\n                    "title": "retained",\n                    "description": "Define if the retain flag must be set to every publish messages. The broker stores the last retained message.",\n                    "type": "boolean",\n                    "default": false\n                },\n                "messageExpiryInterval": {\n                    "title": "messageExpiryInterval",\n                    "description": "This interval defines the period of time that the broker stores the PUBLISH message for any matching subscribers that are not currently connected. When no message expiry interval is set, the broker must store the message for matching subscribers indefinitely. When the retained=true option is set on the PUBLISH message, this interval also defines how long a message is retained on a topic.",\n                    "type": "integer",\n                    "default": -1\n                },\n                "responseTopic": {\n                    "title": "responseTopic",\n                    "description": "The response topic represents the topics on which the responses from the receivers of the message are expected.",\n                    "type": "string"\n                }\n            }\n        }\n    },\n    "required": ["serverHost", "serverPort", "topic"]\n}\n',
  },
  {
    id: 'kafka',
    name: 'Endpoint kafka',
    description: 'Kafka Endpoint',
    version: '3.21.0-SNAPSHOT',
    supportedApiType: 'async',
    supportedModes: ['publish', 'subscribe'],
    availableFeatures: ['resume', 'limit'],
    schema:
      '{\n    "type": "object",\n    "id": "urn:jsonschema:io:gravitee:plugin:endpoint:kafka:configuration:KafkaEndpointConnectorConfiguration",\n    "additionalProperties": false,\n    "properties": {\n        "bootstrapServers": {\n            "type": "string",\n            "title": "bootstrap.servers",\n            "description": "This list should be in the form host1:port1,host2:port2,...",\n            "gioConfig": {\n                "banner": {\n                    "title": "Bootstrap servers",\n                    "text": "A list of host/port pairs, separated by a comma, to use for establishing the initial connection to the Kafka cluster. The client will make use of all servers irrespective of which servers are specified here for bootstrapping—this list only impacts the initial hosts used to discover the full set of servers. "\n                }\n            }\n        },\n        "topics": {\n            "type": "array",\n            "items": {\n                "type": "string"\n            },\n            "title": "Topics",\n            "description": "A list of kafka topics to use."\n        },\n        "consumer": {\n            "type": "object",\n            "title": "Consumer configuration",\n            "id": "urn:jsonschema:io:gravitee:plugin:endpoint:kafka:configuration:KafkaEndpointConnectorConfiguration:Consumer",\n            "properties": {\n                "enabled": {\n                    "title": "Enable the consumer capability",\n                    "description": "Allow to enable or disable the consumer capability.",\n                    "type": "boolean",\n                    "default": true\n                },\n                "encodeMessageId": {\n                    "title": "Encode message Id",\n                    "description": "This options allows encoding message id in base64.",\n                    "type": "boolean",\n                    "default": true\n                },\n                "autoOffsetReset": {\n                    "title": "Auto offset reset",\n                    "type": "string",\n                    "default": "latest",\n                    "enum": ["latest", "earliest", "none"],\n                    "gioConfig": {\n                        "banner": {\n                            "title": "Auto offset reset",\n                            "text": "What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server (e.g. because that data has been deleted): <ul><li>earliest: automatically reset the offset to the earliest offset<li>latest: automatically reset the offset to the latest offset</li><li>none: throw exception to the consumer if no previous offset is found for the consumer\'s group</li><li>anything else: throw exception to the consumer.</li></ul>"\n                        }\n                    }\n                }\n            }\n        },\n        "producer": {\n            "type": "object",\n            "title": "Producer configuration",\n            "id": "urn:jsonschema:io:gravitee:plugin:endpoint:kafka:configuration:KafkaEndpointConnectorConfiguration:Producer",\n            "properties": {\n                "enabled": {\n                    "title": "Enable the producer capability",\n                    "description": "Allow to enable or disable the producer capability.",\n                    "type": "boolean",\n                    "default": true\n                }\n            }\n        }\n    },\n    "required": ["bootstrapServers"]\n}\n',
  },
  {
    id: 'mock',
    name: 'Endpoint mock',
    description: 'Endpoint mock',
    version: '3.21.0-SNAPSHOT',
    supportedApiType: 'async',
    supportedModes: ['publish', 'subscribe'],
    availableFeatures: ['resume', 'limit'],
    schema:
      '{\n    "type": "object",\n    "id": "urn:jsonschema:io:gravitee:plugin:endpoint:mock:configuration:MockEndpointConnectorConfiguration",\n    "additionalProperties": false,\n    "properties": {\n        "messageInterval": {\n            "type": "integer",\n            "title": "Interval between messages publication",\n            "description": "Interval between messages publication, in milliseconds.",\n            "default": 1000\n        },\n        "messageContent": {\n            "type": "string",\n            "title": "Content of published messages",\n            "description": "Content of published messages. Will be suffixed with message index.",\n            "default": "mock message"\n        },\n        "messageCount": {\n            "type": "integer",\n            "title": "Count of published messages",\n            "description": "Count of published messages. If not specified, there is no limit."\n        }\n    },\n    "required": ["messageContent", "messageInterval"]\n}\n',
  },
];

export const getEndpointConnectorSchema = (id: string) => {
  const endpoint = endpointsGetResponse.find(endpoint => endpoint.id === id);
  return endpoint && endpoint.schema ? JSON.parse(endpoint.schema) : {};
};
